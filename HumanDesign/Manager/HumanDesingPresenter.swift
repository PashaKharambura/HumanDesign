//
//  HumanDesingPresenter.swift
//  HumanDesign
//
//  Created by Pavlo Kharambura on 12/18/18.
//  Copyright © 2018 Pavlo Kharambura. All rights reserved.
//

import Foundation
import FirebaseDatabase

enum PickerDataType {
    case Day
    case Month
    case Year
    case Time
    case Country
    case City
    case Approximately
}

enum ComputationType: String {
    case PersonalMap = "PersonalMap"
    case FindLove = "FindLove"
}

class HumanDesignPresenter {
    
    static let shared = HumanDesignPresenter()
    var dataSource = HumanDesignDataSource()
    private var pickerType: PickerDataType = .Day

    fileprivate let backendService = BackendService()

    func getPickerType() -> PickerDataType {
        return pickerType
    }
    func setPickerType(type: PickerDataType) {
        pickerType = type
    }
    func getDataForPicker() -> [String] {
        var data: [String] = []
        
        switch pickerType {
        case .Day:
            data = dataSource.getDays().map {"\($0)"}
        case .Country:
            data = dataSource.getContries()
        case .City:
            if dataSource.getUser().country == NSLocalizedString("Украина", comment: "") {
                data = dataSource.getUaPlaces()
            } else {
                data = dataSource.getRuPlaces()
            }
        case .Month:
            data = dataSource.getMonths()
        case .Year:
            data = dataSource.getYears().map {"\($0)"}
        case .Approximately:
            data = dataSource.getApproximately()
        case .Time:
            data = dataSource.getTime()
        }
        return data
    }
    func setDataFromPicker(index: Int) {
        var data = String()
        switch pickerType {
        case .Day:
            data = dataSource.getDays().map {"\($0)"}[index]
            dataSource.setDay(day: Int(data)!)
        case .Country:
            data = dataSource.getContries()[index]
            dataSource.setCountry(country: data)
        case .City:
            if dataSource.getUser().country == NSLocalizedString("Украина", comment: "") {
                data = dataSource.getUaPlaces()[index]
            } else {
                data = dataSource.getRuPlaces()[index]
            }
            dataSource.setCity(city: data)
        case .Month:
            dataSource.setMonth(month: index)
        case .Year:
            dataSource.setYear(year: dataSource.getYears()[index])
        case .Approximately:
            data = dataSource.getApproximately()[index]
            let array = data.components(separatedBy: ":")
            dataSource.setHour(hour: Int(array.first ?? "0")!)
            dataSource.setMinute(min: Int(array.last ?? "0")!)
        case .Time:
            data = dataSource.getTime()[index]
            let array = data.components(separatedBy: ":")
            dataSource.setHour(hour: Int(array.first ?? "0")!)
            dataSource.setMinute(min: Int(array.last ?? "0")!)
        }
        
    }
    func getCountForPicker() -> Int {
        
        return getDataForPicker().count
    }
    
    func getUser() -> UserModel {
        return dataSource.getUser()
    }
    
    private func modifyDate(d:Int,m:Int,y:Int,h:Int,utc:Int) -> (Int,Int,Int,Int) {
        var day = d
        var month = m
        var year = y
        var hour = h
        let utc = utc
        
        let difference = hour - utc
        if difference < 0 {
            if day == 1 {
                if month == 1 {
                    month = 12
                    day = 31
                    hour = 24+difference
                    year -= 1
                } else {
                    month -= 1
                    switch month {
                    case 4,6,9,11:
                        day = 30
                    case 2:
                        if year % 4 == 0 {
                            day = 29
                        } else {
                            day = 28
                        }
                    default:
                        day = 31
                    }
                    hour = 24+difference
                }
            } else {
                day -= 1
                hour = 24+difference
            }
        } else {
            hour -= utc
        }
        return (day,month,year,hour)
    }
    
    func getGraphInfo(success: @escaping ()->(), failure: @escaping (_ error: Error)-> (), internetError: @escaping ()->()) {
        if InternetReachability.isConnectedToNetwork() {

            let minute = dataSource.getUser().birthMinute
            
            let dateComp = modifyDate(d: dataSource.getUser().birthDay, m: dataSource.getUser().birthMonth+1, y: dataSource.getUser().birthYear, h: dataSource.getUser().birthHour, utc: dataSource.getUser().UTC)

            let request = BodyGraphAPIRequest(day: dateComp.0, month: dateComp.1, year: dateComp.2, hour: dateComp.3, minute: minute)
            
            backendService.request(request: request, success: { (json) in
                guard let json = json as? [String: Any] else {
                    return
                }
                let userInfo = GraphMapper.mapJSON(json: json)
                self.dataSource.setUserInfo(info: userInfo)
                DispatchQueue.main.async {
                    success()
                }
            }) { (error) in
                DispatchQueue.main.async {
                   failure(error)
                }
            }
        } else {
            DispatchQueue.main.async {
                internetError()
            }
        }
    }
    
    func sendEmailTo(type: ComputationType, email: String, success: @escaping ()->(), failure: @escaping (_ error: Error)->()) {
      
        let info = "\(String(format: "%02d",getUser().birthDay)).\(String(format: "%02d", getUser().birthMonth)).\(String(format: "%04d", getUser().birthYear)), \(String(format: "%02d", getUser().birthHour)):\(String(format: "%02d", getUser().birthMinute)), \(getUser().city)"
        
        let params = ["email": email,
                      "info": info,
                      "profile": getUser().info?.profile,
                      "type": getUser().info?.type]
        
        Database.database().reference().child(type.rawValue).child(UUID().uuidString).setValue(params) { (error, ref) in
            if let error = error {
                failure(error)
            } else {
                success()
            }
        }
    }
    
}

class HumanDesignDataSource {
    
    private var user = UserModel()

    func setUserInfo(info: UserInfo) {
        user.info = info
    }
    
    func getUser() -> UserModel {
        return user
    }
    
    func setDay(day: Int) {
        user.birthDay = day
    }
    func setMonth(month: Int) {
        user.birthMonth = month
    }
    func setYear(year: Int) {
        user.birthYear = year
    }
    func setHour(hour: Int) {
        user.birthHour = hour
    }
    func setMinute(min: Int) {
        user.birthMinute = min
    }
    func setCountry(country: String) {
        user.country = country
    }
    func setCity(city: String) {
        user.UTC = 2
        for city_ in CityManager.russianPlaces {
            let array = city.components(separatedBy: ")-")
            if city_.value.contains(array.last ?? "") {
                user.UTC = Int(city_.key) ?? 0
            }
        }
        let array = city.components(separatedBy: ")-")
        user.city = array.last ?? city
    }
    
    func getYears() -> [Int] {
        var years = [Int]()
        for i in 1930...2018 {
            years.insert(i, at: 0)
        }
        return years
    }
    func getDays() -> [Int] {
        var days = [Int]()
        for i in 1...31 {
            days.append(i)
        }
        return days
    }
    func getMonths() -> [String] {
        return [NSLocalizedString("Январь", comment: ""),NSLocalizedString("Февраль", comment: ""),NSLocalizedString("Март", comment: ""),NSLocalizedString("Апрель", comment: ""),NSLocalizedString("Май", comment: ""),NSLocalizedString("Июнь", comment: ""),NSLocalizedString("Июль", comment: ""),NSLocalizedString("Август", comment: ""),NSLocalizedString("Сентябрь", comment: ""),NSLocalizedString("Октябрь", comment: ""),NSLocalizedString("Ноябрь", comment: ""),NSLocalizedString("Декабрь", comment: "")]
    }
    func getContries() -> [String] {
        return [NSLocalizedString("Украина", comment: ""),NSLocalizedString("Россия", comment: "")]
    }
    func getUaPlaces() -> [String] {
        return CityManager.ukrainianPlaces
    }
    func getRuPlaces() -> [String] {
        var data = [String]()
        for item in CityManager.russianPlaces {
            let places = item.value.map {"(UTC:+\(item.key))-\($0)"}
            data.append(contentsOf: places)
        }
        return data
    }
    func getApproximately() -> [String] {
        return ["03:00", "09:00", "15:00", "21:00"]
    }
    func getTime() -> [String] {
        var data: [String] = []
        let hours = ["00","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23"]
        let minutes = ["00","05","10","15","20","25","30","35","40","45","50","55"]
        for hour in hours {
            for minute in minutes {
                data.append(hour+":"+minute)
            }
        }
        return data
    }
    
}

enum TypeInfoState {
    case type
    case profile
}

class UserProfileTypeManager {
    
    static var state: TypeInfoState = .type
    static let profiles = ProfilesTypes.profiles
    static let types = ProfilesTypes.types
    static var selectedProfile: ProfileModel?
    static var selectedType: TypeModel?

    static func getType(by nameId: String) -> TypeModel? {
        return types.first(where: {$0.id == nameId})
    }
    static func getProfile(by nameId: String) -> ProfileModel? {
        return profiles.first(where: {$0.id == nameId})
    }
    static func getProfilesCount() -> Int {
        return profiles.count
    }
    static func getTypesCount() -> Int {
        return types.count
    }
    static func getDefinition(int: Int) -> String {
        switch int {
        case 1:
            return NSLocalizedString("Первое", comment: "")
        case 2:
            return NSLocalizedString("Второе", comment: "")
        case 3:
            return NSLocalizedString("Третье", comment: "")
        case 4:
            return NSLocalizedString("Четвертое", comment: "")
        default:
            return ""
        }
    }
}

class ProfilesTypes {
    
    static let profiles: [ProfileModel] = [
        ProfileModel(id: "1/3", name: NSLocalizedString("1/3 Исследователь - Мученик", comment: ""), image: UIImage(named: "13")!, info: "Человек, которому не стыдно будет рассказать в конце жизни о своём опыте. Все его действия – личные эксперименты, пробы и ошибки. Он лучше набьёт шишку, чем воспользуется советом, не попробовав этого.\n\nНа этой Земле Вы в роли ученика. Ваша жизнь – это увлекательные американские горки, поворотов которых Вы и сами не предугадаете. Исследуя и пробуя, такой человек набирается опыта и устойчиво стоит на ногах. Жажда нового и неизведанного – это спутники по жизни исследователя-мученика. Вы и есть тот самый человек, про которого говорят: «Вначале делает, а потом думает». Исследователя-мученика вполне можно назвать коммуникабельным и открытым к общению человеком, но любые условности и обязательства сковывают Ваши движения, и от этого двигаться дальше в поисках нового опыта становится некомфортно, поэтому в общении с окружающими Вы не любите ставить рамки и границы. Также Вам не нравится всё, что кажется ненадёжным, - это пугает возможностью разрушения. Поэтому Вас ещё больше тянет на открытие новых берегов, где Ваши ноги ещё не ходили.", peoples: "Деми Мур, Джаред Лето, Брюс Уиллис."),
        ProfileModel(id: "1/4", name: NSLocalizedString("1/4 Исследователь - Оппортунист", comment: ""), image: UIImage(named: "14")!, info: "Человек с добрым сердцем и чистыми помыслами, исследующий этот интересный со всех сторон для него мир. Имеет свойство «заражать» своим позитивным настроем окружающих. Такие люди не оставят проблему без внимания, а тщательно доберутся до её истоков.\n\nПосле общения с такими людьми ты полон энергии на свершения, тепла, счастья и позитива. Они, как ходячие солнышки, освещают мир вокруг себя. Аккуратно, с любовью, местами наивно, исследователи-оппортунисты познают пространство. К сожалению, не всегда им приходится видеть мир таким, каким они воображают его. Самое главное не позволить себе разочароваться, а сохранить свет в глазах, смотрящих вокруг. Ведь иногда мир может быть не таким дружелюбным, не таким простым и не таким радостным. Эти факты стоит просто принять, ибо Вы склонны к тому, чтобы начать недоверчиво подмечать изъяны, стать осторожнее и сдержаннее, что совсем не присуще Вашей личности.", peoples: "Гвен Стефани, Бетт Мидлер."),
        ProfileModel(id: "2/4", name: NSLocalizedString("2/4 Отшельник - Оппортунист", comment: ""), image: UIImage(named: "24")!, info: "Талантливый человек с раздвоением личности – очень чёткое описание отшельника-оппортуниста. Одиночка, любящий находится в обществе. Ему трудно ответить на вопрос, кто он, не только другим, но и себе.\n\nВечные поиски себя, которые кажутся непостижимо долгими, так и не дают ответа на главный вопрос: «Кто я?». Две разные личности спокойно уживаются в одном человеке. Иногда это даже Вам нравится: Вы можете застесняться, а можете быть душой компании; смелый в одном, нерешительный в другом; продуктивный сегодня, а завтра невозможно оторвать себя от кровати. Наверняка, спросив у разных людей мнение о Вас, никто не поймёт, что речь об одном и том же человеке. Будет неверно утверждать, что Вам доставляет такая жизнь дискомфорт – даже наоборот, при условии, что Вы подружитесь со своими личностями, Вы наградите себя яркой, интересной и полной сюрпризов жизнью. Чаще всего отшельники-оппортунисты талантливы во всём, чем бы они не занимались. Так же очень важно вкладываться в своё дело, не жалеть ресурсов и времени на это, а после купаться в славе и признании.", peoples: "Риана, Адель, Лана Дель Рей."),
        ProfileModel(id: "2/5", name: NSLocalizedString("2/5 Отшельник - Еретик", comment: ""), image: UIImage(named: "25")!, info: "Найдётся ли человек, который знает вас настоящего? Вы настолько прониклись своей ролью, что порой и сами забываете, кем являетесь. Зато вы уникальны, привлекательны, и вами восхищаются.\n\nМир – ваш большой театр, где главная роль досталась вам. Отшельник-еретик спокойно и обдуманно проигрывает сценарии по своему желанному сюжету. Жажда славы и признания или попросту непонимание, кто он такой? Внутри этой личности смешались чувства и желания. Чужое мнение, без сомнений, очень важно для вас, но также где-то глубоко внутри спряталось нежелание открыться миру. За одной картинкой для всех скрывается другая картинка для вас. От того, что вы боитесь не понравится людям собой настоящим, вы видите смысл продолжать это кино. Но это приносит и хорошие плоды: отшельник-еретик отличный друг. Этот человек умеет выслушать, поддержать и сохранит секреты. Он крайне заинтересован угодить всем вокруг, поэтому попросту не позволит себе обойти стороной другого человека. За всю жизнь такие люди обзаводятся множеством настоящих друзей, перед которыми, быть может, они откроются, и тогда это будет крепчайшим союзом.", peoples: "Майли Сайрус, Кевин Костнер, Робин Уильямс."),
        ProfileModel(id: "3/5", name: NSLocalizedString("3/5 Мученик - Еретик", comment: ""), image: UIImage(named: "35")!, info: "Про жизнь мученика-еретика можно писать книгу, а лучше комикс, а лучше снять приключенческий фильм. Судьба уготовила этим людям множество испытаний, которые они виртуозно превращают в опыт, а после ещё и искренне поблагодарят за него.\n\nНе важно, какая беда или радость встречается на вашем пути, – вы с лёгкость побеждаете в беге с препятствиями, даже если заняли не первое место. Ведь только вы способны объяснить, почему последнее место – это победа. В своей картине мира мученик-еретик не знает, что такое поражения и неудачный опыт. Для него каждое событие в жизни имеет глобальный смысл, и он трансформирует его в опыт, легко проводя причинно-следственные связи. Иногда вы крайне импульсивны и конфликтны, зато эти качества хорошо дополняют идею и смысл вашей жизни. Это помогает проходить мученикам-еретикам уроки жизни, бросаться в риск, быстро принимать решения и зажигать других людей своими свершениями. Порой многим кажется, что за вами не угнаться, порой многие думают, что ваша жизнь слишком сумбурна и нестабильна, но какая разница, что думают люди, если с ваших уст не пропадает улыбка, а разум неустанно требует новых приключений.", peoples: "Джулия Робертс, Мила Йовович, Мэрил Стрип."),
        ProfileModel(id: "3/6", name: NSLocalizedString("3/6 Мученик - Ролевая Модель", comment: ""), image: UIImage(named: "36")!, info: "Вы тот, кому будет, что рассказать в старости внукам. И будьте уверены, они будут охать и ахать! Потому что вы прошли такой захватывающий и каверзный путь в жизни, что порой сами удивляетесь и с трудом верите в происходящее.\n\nМученик ролевой модели точно лучше остальных попробует жизнь на вкус. Ему предстоит пройти порой трудный, а порой сумасшедший опыт. С самых малых лет вас тянет на эксперименты, авантюры и риски. Если вам удастся спокойно дожить до старости, то нет… вам не удастся сделать это спокойно. С ловкостью и юмором вы накапливаете в копилку мудрости бесценные моменты жизни, о которых с гордостью поделитесь с родными. Сталкиваясь с опасностями, мученик подвергается разочарованиям, которые могут вытекать в чувство вины и влиять на отношения с окружающими. Но на самом деле вы очень хорошо знаете, что, доверившись себе, любая неурядица будет пройдена с успехом, главное не терять надежды.", peoples: "Никола Тесла, Бен Стиллер, Кейт Хадсон."),
        ProfileModel(id: "4/6", name: NSLocalizedString("4/6 Оппортунист - Ролевая Модел", comment: ""), image: UIImage(named: "46")!, info: "Оппортунист с лёгкостью и энтузиазмом заводит новые знакомства и ассоциируется у людей с теплотой и пониманием. Так и есть, эти личности сильны в коммуникации и построении прочных взаимоотношений.\n\nВы пришли в этот мир сказать что-то важное, но это удастся лишь при стечении многих обстоятельств. Такие, как вы, окружены вниманием и общением со стороны людей, ведь вы располагаете к себе человека после первого же знакомства. Однако ваша личная позиция – относиться к людям осторожнее и следить за собой. Имея множество опыта общения, вы стопроцентно сталкивались с не очень добрыми намерениями или поступками со стороны тех, кому доверяли, поэтому с возрастом стараетесь держать дистанцию между собой и остальными. Но это никак не влияет на вашу реализацию себя через коммуникацию, ведь потенциально вы – влиятельный переговорщик, душа компании и уважаемый человек в обществе, ко мнению которого с доверием прислушиваются.", peoples: "Игги Поп, Роналдо, Уолт Уитмен, Сергей Шнуров."),
        ProfileModel(id: "4/1", name: NSLocalizedString("4/1 Оппортунист - Исследователь", comment: ""), image: UIImage(named: "41")!, info: "Уникальность вашего пути в том, что он выверен и последователен. Вряд ли в вашу жизнь будут закрадываться сильные переломные моменты, ломающие и меняющие вас. Зато сплошная прямая даёт спокойствие и уверенность в завтрашнем дне.\n\nНемногим в этой жизни повезло иметь строго очерченную судьбу. Вы заранее предугадываете следующие шаги, а оттого уверенно идёте вперёд, не боясь споткнуться, и… не спотыкаетесь. Такой дар дан вам благодаря вашему детству, в котором вы крайне много времени посвятили обучению и исследованию. Прочно обосновавшись на своей территории, оппортунист-исследователь склонен стать излишне прямолинейным и узколобым. Поэтому люди вокруг зачастую занимаются тем, что раздражают вас своей завистью к вашему умению концентрироваться на одном деле и шагать по прямой. На самом деле они помогают расшатать вашу личность, сделать более гибкими и открыть новые горизонты. Поэтому тщательно выбирайте своё окружение и доверяйте в первую очередь себе и внутренней интуиции, она подскажет верный путь.", peoples: "Бенджамин Франклин, Дима Билан, Эминем."),
        ProfileModel(id: "5/1", name: NSLocalizedString("5/1 Еретик - Исследователь", comment: ""), image: UIImage(named: "51")!, info: "Практичный, основательный, грамотный и талантливый лидер. Человек, у которого всё рассчитано, расписано и понятно. Нередко еретики-исследователи становятся очень уважаемыми личностями в своём окружении и добиваются значительного успеха в выбранной деятельности.\n\nВообще, к чему еретик-исследователь не прикоснётся, всё с лёгкостью и точностью начинает работать в нужном направлении. Жизнь уже успела дать вам уроки, которые вы с закончили с медалью и теперь не допустите неразберихи в своей и чужой жизни. Такие люди не зануды-отличники, а завидные бизнесмены. К счастью для окружающих, они с удовольствием делятся накопленным опытом и помогают остальным пройти путь становления личности. Еретикам-исследователям отлично даются деятельности, в которых им предстоит обучать. Но не всё так прозрачно, как может показаться на первый взгляд. Внутреннее наполнение таких людей довольно тяжко: начиная от страха показаться на людях без маски до глубокой неуверенности в себе. Да, к сожалению, тараканов у еретиков-исследователей хватает, и бороться с ними или нет – решение их самих. Кажется, что им и так живётся, как котам в масле, но на самом деле они ждут поддержки и оценки их действий по заслугам.", peoples: "Арнольд Шварцнегер, Дженифер Энистон, Эд Ширан, Роман Абрамович."),
        ProfileModel(id: "5/2", name: NSLocalizedString("5/2 Еретик - Отшельник", comment: ""), image: UIImage(named: "52")!, info: "Еретик-отшельник научился жить двумя жизнями одновременно. А какой именно ему хочется больше – самому не понятно. Сегодня ему хочется безудержного веселья в шумной компании, а завтра -побыстрее сбежать в тёмный лес и побыть наедине с собой.\n\nКак ни крути, но таким личностям труднее всего прийти к золотой середине. Два «Я» самостоятельно принимают решение, когда им выйти в свет, не спрашивая разрешения у хозяина. От этого такой человек может показаться с виду странным, ведь он имеет склонность резко пропадать и удивительным образом возвращаться в жизнь. Однако, Вы настолько очаровательны и прекрасны в своих попытках открыться и показать миру, какой Вы, что окружающие мало обращают внимание на ваши выходки. Тем более за долгие годы своей жизни вы ловко научились маневрировать вашими личностями. Кстати, еретики-отшельники всю жизнь борются в попытках открыться людям, но в итоге им поможет лишь принятие своей реальности и разрешение быть собой, параллельно отдаваясь общению.", peoples: "Роберт Де Ниро, Константин Хабенский."),
        ProfileModel(id: "6/2", name: NSLocalizedString("6/2 Ролевая Модель - Отшельник", comment: ""), image: UIImage(named: "62")!, info: "Отшельник – это мудрый наставник, опытный провидец и уважаемый творец. Звучит неплохо, но это заслуженный результат за проделанную работу. Отшельники чаще всего имеют личный уникальный опыт: до 30 лет они учатся на своих ошибках и набивают шишки, до 50-ти понимают, что можно учиться на ошибках других, а после 50-ти лет становятся мудрейшими людьми, чьё мнение ценно.\n\nВаша жизнь с ранних лет пропитана мудростью и стремлением к ней. В вас как будто бы заключён недостижимый идеал, который является путеводной нитью и стимулом к развитию. Иными словами, отшельник точно знает, кем он хочет быть. Жизненные ситуации довольно активно помогают ему воплотить этот образ в реальность посредством уроков и испытаний, которые он успешно проходит. И, казалось бы, такой идеальный человек стопроцентно имеет завышенную самооценку или у него проблемы с отношениями. Но нет, как раз-таки отшельники сумели сочетать в себе духовное развитие и материальное, земное и воздушное, отчего их жизнь похожа на путь тибетского мудреца. Однако самое главное, что Вы стремитесь к зрелости и осознанности не для признания в обществе, а для развития собственной души, а это уже весомая ступень вверх.", peoples: "Элтон Джон, Мэттью Макконахи, Ксения Собчак."),
        ProfileModel(id: "6/3", name: NSLocalizedString("6/3 Ролевая Модель - Мученик", comment: ""), image: UIImage(named: "63")!, info: "Незаурядная личность, которая в вечном поиске авантюр и интересных событий. Позитивное отношение к жизни и работа над собой – это про мученика.\n\nВы в предвкушении ждёте завтра что-то интереснее, чем было сегодня. Ваш вечный голод к насыщенности и наполненности жизни лишь изредка утихает при жизненных встрясках, которые вы не прочь и сами себе устроить. Чувство юмора и коммуникабельность помогают отлично ладить с окружающими. Однако таким, как вы, недостаточно просто ладить с кем-нибудь. Вы всегда находитесь в поисках себе подобных, но никак не можете найти того самого человека, с которым вы на одной волне, отчего приходится наслаждаться обществом самого себя. Посади мученика в офис, и он сгорит внутри, так и не разгоревшись. Рутина – самое страшное, что можно придумать для такого человека, а значит бросать вызов судьбе и себе – прекрасный способ скрасить вашу жизнь. Что уж там говорить, самоуверенности у вас тоже достаёт. Вы всегда помните свою уникальность и оцениваете себя по достоинству, не понимая, почему все вокруг живут такими скучными жизнями.", peoples: "Стив Джобс, Пенелопа Крус, Иван Ургант.")
    ]
    
    /////////////////////////////////////////////////
    
    static let types: [TypeModel] = [
        TypeModel(id: "projector", name: NSLocalizedString("Проектор", comment: ""), image: UIImage(named: "Проектор")!, info: "Проницательность, умение видеть глубинное, скрытое от остальных глаз, в людях – это про Проектора. Вы умеете организовать вокруг себя слаженную работу команды. Вы - тот самый человек, который является вектором движения для окружающих. Если ещё и научиться ждать, то удача будет всегда на вашей стороне.\n\nКто такой Проектор?\n\nПроектор обладает неисчерпаемым внутренним потенциалом считывать людей, как книги, моментально понимать их желания и умеют направить энергию в нужную сторону. Такие люди чувствуют себя комфортно в любой компании, ведь они всегда знают, кто перед ними находится. В обществе Вас легко обнаружить, ведь Проектор активен, любознателен, любит исследовать, даёт ценные советы. Не всегда приятно, что их слова часто ждёт отпор, но Вы не расстраиваетесь, ведь в своих словах уверены. В работе Проектору с лёгкостью даётся возглавлять проекты, управлять людьми, но сам он не берётся за рутину – это убивает его личность, стремящуюся к вечно новому.\n\nСтратегия Проектора\n\nЦелью Проектора является получить доступ к энергии человека посредством приглашения. Таким образом Вы ощущаете себя значимым, нужным и готовы вкладываться в проект. Например, фразы «давай переедешь ко мне», «будем строить вместе бизнес», «этот проект будешь вести ты» воспринимаются Проектором как «ты нужен мне», «я принимаю и ценю тебя», «я заметил тебя и оценил по достоинству». Такое отношение к себе для Вас очень ценно.\n\nЧто уводит от счастливой жизни?\n\nОкружение – это то, что делает состояние такой личности. Неправильные, в вашем понимании, люди в окружении – это серьёзный повод огорчиться. А горечь в этом случае – вектор вовсе не к счастливой жизни. Также Вам нужно осторожно выбирать деятельность, которой будете заняты большую часть времени, ведь Вам очень трудно удерживать фокус внимания. Потрудитесь над тем, чтобы обеспечить свои дела максимально свободным посещением и в идеале развивать свои организационные навыки. Прекрасными профессиями для Проектора могут быть: администратор, координатор, владелец бизнеса! И не забывайте, что приглашение на работу и признание ваших успехов – важные для Вас факторы.\n\nОтношения с Проектором\n\nБезусловно, взаимоотношения с другими людьми – это самая важная вещь в вашей жизни. Вы не экономите энергию на качество построения отношений, вы не экономите силы на секс. Он, кстати, играет ключевую роль в вашей жизни. В сексе так же, как и во всём остальном, Вы ожидаете приглашения от другого человека, чтобы убедиться, что Вас хотят. Проекторы в этом мире именно для того, чтобы собрать вокруг себя правильных людей и получать признание!", peoples: "Александр Пушкин, Барак Обама, Мерлин Монро, Наполеон, Леонардо Ди Каприо."),
        TypeModel(id: "reflector", name: NSLocalizedString("Рефлектор", comment: ""), image: UIImage(named: "Рефлектор")!, info: "По самому названию можно понять, что Рефлекторы созданы отражать и реагировать. В Дизайне человека этот тип – самый необычный среди всех именно своей способностью отзеркалить происходящее, а также усилить это. На Земле достаточно сложно встретить людей с таким типом личности, но они и вправду уникальны. Рефлекторы моментально чувствуют происходящее вокруг: от негативного до позитивного.\n\nКто такие Рефлекторы?\n\nХорошо бы, чтобы в любом обществе людей присутствовал Рефлектор. Они усиливают взаимодействие энергий и аур окружающих. Не стоит недооценивать важность роли такого человека. Вы – хамелеон, моментально перестраивающийся под состояние окружающей среды, Вы – зеркало, в котором люди видят себя, Вы – тонкая невидимая нить, соединяющая мысли и действия других своим ненавязчивым присутствием. Но, к сожалению, очень часто люди используют Вас для решения собственных проблем, а Вы склонны к разочарованию, если точка зрения, высказанная Вами, была неинтересна и недооценена.\n\nСтратегия Рефлектора\n\nДля Рефлектора особенно важно двигаться в унисон со своей стратегией, ведь им так просто потеряться и не получить того удовольствия, которого они заслуживают. А ведь удовольствие – это одна из ключевых вещей, ради которой Вы пришли в этот мир. Ответ на вопрос самому себе время от времени «А я тот, кем я являюсь?» укажет на то, в правильном ли направлении двигаются Ваши мысли. Познание себя – это достаточно сложная задача, особенно когда оно происходит не в моменте, а за достаточно долгий период времени – двадцать восемь – двадцать девять дней.\n\nЧто уводит от счастливой жизни?\n\nВы останетесь несчастны в случае, если станете двигаться в противоположную сторону от вашего предназначения, которое заключается в очаровании миром, удовольствии и удивлении от происходящего. Рефлектору хорошо только тогда, когда он находится на своём месте. Для этому ему нужно позволить себе быть собой. Регулярное изучение себя, построение правильных вопросов внутрь и поиск комфорта – это первое, с чего нужно начать работу над собой.\n\nРефлектор в работе\n\nНа вашу личность в полной мере влияет Луна, так что верные решения Вы сможете принимать, во-первых, по истечению лунного календаря, а во-вторых, посоветовавшись с собой. Когда Рефлектор нашёл себя, все его действия сочатся мудростью и ценностью. Таким образом Вам легко стать незаменимым сотрудником или бесценным руководителем. От Вас зависит выбранная деятельность и удовлетворение от проделанной работы. Окружающим очень повезёт, если Рефлектор сам захочет сотрудничать с ними, - наградой будет успех в любых его начинаниях.\n\nРефлектор в отношениях\n\nРефлектор склонен оказаться в двух крайностях: высшая ценность и взаимопонимание или бесполезная трата времени. Отношения для таких людей важны и принесут множество ярких впечатлений, если Рефлектор будет оставаться собой. В семье таким людям важно пробовать с партнёром что-то новое, вместе удивляться, расслабляться и кайфовать. Такую семью невозможно будет разрушить.", peoples: "Сандра Баллок, Майкл Джексон, Фёдор Достоевский."),
        TypeModel(id: "manifestor", name: NSLocalizedString("Манифестор", comment: ""), image: UIImage(named: "Манифестор")!, info: "Если человек свободолюбив, независим, самостоятелен и начинает все свои действия, пылко бросаясь в бой, - перед вами Манифестор. Они уверены в своих результатах и энергично продвигаются по жизни. Амбициозные и стойкие перед влиянием людей, Манифесторы осуществляют свои планы.\n\nКто такой Манифестор?\n\nВсегда у себя на уме, но впереди планеты всей. Подавить вашу свободу – то же, что и подрезать крылья птице. Ведь Вы не привыкли предупреждать о своих действиях, информировать о планах, Вы злитесь, если встречаете сопротивление. Эти качества помогают Вам выполнять своё предназначение – давать старт проектам, вести которые будут Проекторы, Генераторы - обеспечат энергией, а Рефлекторы дадут обратную связь. Но этот мощный внутренний потенциал Манифестора отталкивает людей вокруг, ведь Вас попросту боятся. Страх встретить сопротивление и быть сломленным Вас вечно стопорит перед тем, чтобы открыться людям. Манифесторам нужно больше времени уделять своему внутреннему состоянию, ведь их психическое и физическое здоровье напрямую зависит от подавления ярости и злости.\n\nСтратегия Манифестора\n\nВсё будет замечательно, если Вы научитесь информировать окружающих о своих действиях. Например, «Я собираюсь сходить в магазин», «Эта ситуация меня злит, я больше не буду об этом говорить», «Я буду продолжать это делать». Главное здесь высказать своё намерение, но никак не спросить разрешения, ведь это разные вещи. Манифестору нелегко даётся это, они привыкли принимать решения самостоятельно и, без ведома остальных, действовать.\n\nЧто уводит от счастливой жизни?\n\nГнев и злость  - ваши главные враги. Они будут сопровождать Вас по жизни, пока Вы будете слышать отказы, встречать сопротивление, возражения, а планы будут идти не по вашему сценарию. Для этого нужно научиться говорить правдиво о своих намерениях другим людям, информировать о своих действиях, дабы перестать раздражаться непониманием людей и направить сильную энергию в нужную сторону.\n\nМанифестор в работе\n\nПосадите Манифестора в офисе за нудную рутинную работу, и Вы сломаете ему жизнь. У этих людей огонь внутри, который при верном управлении разожжёт возможности или сожжёт Манифестора. Идеальным решением для Вас будет начало чего-то нового. Вы полны энергии на запуск проектов, нового бизнеса, а главное – вы уверены в результате, но дальнейшее ведение дел лучше передать Генератору.\n\nМанифестор – это тот редкий тип людей, которым эффективнее всего работать на себя. Это позволит Вам лично принимать решения, раздавать поручения, составлять стратегию и уверенно двигаться к цели. Главное Манифестору-начальнику не забывать информировать подчинённых о своём плане действий, чтобы все работали на результат.\n\nВажным будет упомянуть серьёзность отдыха для Вас. Манифестор имеет свойство выдыхаться, а в таком случае он бесполезен. Работа на чужой энергии, например, Генератора, не спасёт Вас от бессмысленного труда. Вы эффективны лишь на своих ресурсах, которые покидают Вас, если отдых – это редкость. Такое свойство достаётся всем людям с неопределённым Сакралом.\n\nМанифестор в отношениях\n\nВ силу своей закрытой и отталкивающей ауры жизнь Манифестора не сочится вниманием других людей. Прочно выстроенные барьеры мешают раскрыться Вам и вашему партнёру. Только сонастройка энергий и контакт аур поможет качественно выстроить отношения. Для этого Манифестору придётся взять инициативу на себя и действовать в соответствии со своей стратегией, ведь окружающие боятся к Вам подойти.\n\nВ отношениях с Манифестором нужно помнить о важности вербального общения – это облегчает задачу и помогает напряжению уходить из отношений.", peoples: "Моника Беллуччи, Владимир Путин, Джонни Депп, Том Круз, Ксения Собчак."),
        TypeModel(id: "generator", name: NSLocalizedString("Генератор", comment: ""), image: UIImage(named: "Генератор")!, info: "Если Вы хотите увидеть мощного человека за работой, просто понаблюдайте за Генератором, живущим в соответствии со своей истинной природой. Ваша энергия не имеет границ, но главное – уметь направлять её. Порой кажется, что внутри Генератора таится батарея с нескончаемым зарядом. Они созданы для получения удовлетворения через свой внутренний отклик.\n\nКто такие Генераторы?\n\nГенератор чувствителен к влиянию других людей, их открытость миру не позволяет сказать «нет» в нужный момент. Из-за этой наивности они часто страдают от неудовлетворения жизнью, ведь таким образом Вы распыляетесь и тратите время на ненужные вещи. На самом деле внутри себя Вы всегда знаете, чего хотите, главное вовремя задавать себе вопросы: «Это то, чего я хочу сейчас?», «Сейчас я принимаю решение или просто поддаюсь влиянию?». Добиться успеха Вам поможет только умение слушать себя, обращать внимание на мелочи и, страдая от последствий, определять для себя, в какой момент Вы пошли не по тому пути.\n\nСтратегия Генератора\n\nДоверие к себе, уважение к внутреннему голосу, умение распознать тот самый «отклик» в глубине. В общем, жить в соответствии с интуицией – это наилучший совет, который можно дать Генератору. Энергия, которой Вы владеете, необъятна и неисчерпаема, но главное условие – откликаться, а не инициировать.\n\nЧто уводит от счастливой жизни?\n\nГенератору очень легко отвлечься на случайности и запутаться. Но увы, Вам сложно полагаться на себя, а не ждать от кого-то, что он подскажет верный путь. Этот путь Вы знаете сами. Но если уж Генератор начал жить инициируя, то стоит ожидать потерю энергии и неудовлетворённость от пройденного, не вашего, пути.\n\nГенератор в работе\n\nГенераторы - это пчёлы-труженики. Порой может казаться, что они не отдыхают, но на самом деле наполнение происходит от самой работы и реализации себя, с условием, что это то, чего они хотят на самом деле. Вы наиболее эффективны, работая в команде и наполняя всех, кто рядом с Вами. Генератору сложно посоветовать определённый род деятельности, ведь мы не можем решать за него, зато он сам может решить и свернуть горы. В этом ему поможет чёткое построение целей и задач, структура работы и времяпрепровождение наедине с собой.\n\nГенератор в отношениях\n\nПрочные отношения с Генератором выстроить легче, если помогать ему слышать внутренний отклик. Для этого нужно научиться задавать правильные вопросы, ответом на которые будет «да» или «нет». Например, такой вопрос, как: «Где ты хочешь поужинать?» не имеет смысла для Генератора, ведь он предполагает рассуждения и решение. А вот если Вы спросите у Генератора «Хочешь сегодня китайскую кухню?», «Сходим в этот ресторан?», «Приготовим ужин дома?», то он ответит Вам, интуитивно полагаясь на себя. Чаще всего такие люди сами не знают, чего хотят.", peoples: "Леди Гага, Ольга Бузова, Дима Билан, Брюс Уиллис, Джим Керри, Николай Гоголь."),
        TypeModel(id: "mangenerator", name: NSLocalizedString("Манифестирующий генератор", comment: ""), image: UIImage(named: "Манифестирующий генератор")!, info: "Из названия уже понятно, что это спорная личность. Почему же не Генерирующий Манифестор, а наоборот? Такой человек – бомба замедленного действия, ведь он зачастую не знает масштаба своей силы. Вы не любите ждать и перебрасывать ответственность на других. Но внутри Вас бушует ураган энергии, сметающий всё на своём пути.\n\nКто такие Манифестирующие Генераторы?\n\nНе просто так в названии вашего дизайна заключены две личности. Генераторам сложно справиться с яростью, Манифесторам – с фрустрацией, а Манифистирующим Генераторам приходится справляться с этой двойной дозой, заключённой в одной личности. Но в то же время в вашем дизайне есть особенности, характерные исключительно для вас. В отличии от Генератора, Вы мощнее, быстрее, а также обладаете большим энтузиазмом. В отличии же от Манифестора, система внутреннего отклика присуща Вам от природы. Комбинация этих факторов даёт неограниченные возможности характера, но жизнь склонна преподносить Вам сложные уроки, которые необходимо учитывать, дабы использовать все ваши возможности.\n\nСтратегия Манифестирующего Генератора\n\nНавык, который понадобится Вам больше остальных – это самоконтроль, он же и даётся сложнее других. Он жизненно необходим Манифестирующему Генератору для понимания, где сейчас нужно сделать остановку и услышать внутренний отклик. К счастью, с распознанием его у Вас нет проблем. Идеальной стратегией для Вас будет получение возможности извне, разрешение внутреннему указать путь и пройти по нему. Для этих людей вся их жизнь – игра. Действуйте играючи, и успех не заставит себя ждать.\n\nЧто уводит от счастливой жизни?\n\nМанифестирующему Генератору стоит научиться доверять себе и понять, что стратегия их личного внутреннего отклика – лучшая для них. В обратном случае им придётся встретиться лицом к лицу с неприятными чертами Манифестора и Генератора – гнев, раздражительность, чувство неудовлетворённости от проделанной работы и много остальных, которые разрушают и вводят в ужасное состояние таких ярких личностей, как Вы.\n\nМанифестирующий генератор в работе\n\nЭнергия и внутренняя закалка, которой Вы обладаете, развязывает руки для любых начинаний и действий, которые могут прийти в вашу голову, но без самоконтроля и умения слушать себя, Манифистирующий Генератор подвержен внешнему воздействию. Люди вокруг могут пользоваться этим, а Вы, в свою очередь, не сдвинетесь с места. Но не только окружающие могут сделать Вас «рабами», но и Вы сами. Неумение заканчивать свои проекты и рвение начать что-то новое заставляет Вас чувствовать неудовлетворение собственной жизнью и выгорание.\n\nМанифестирующий Генератор в отношениях\n\nИзлишняя активность в отношениях, как и в работе, может помешать развитию отношений Манифистирующему Генератору. Есть риск взять на себя руль управления, что может не понравится партнёру и не даст возможности насладится моментом. В романтических отношениях есть смысл дать возможность себе успокоиться и просто побыть рядом с человеком, а Ваш внутренний отклик обязательно укажет на то, Ваше это или нет.", peoples: "Владимир Высоцкий, Виктор Цой, Анжелина Джоли, Земфира.")
    ]

}

class CityManager {
    static let russianPlaces = [
        "2": ["Калининградская обл."],
        "3": ["Санкт-Петербург", "Севастополь", "Респ. Адыгея", "Респ. Дагестан", "Респ. Ингушетия", "Кабардино-Балкарская Респ.", "Респ. Калмыкия", "Респ. Крым", "Карачаево-Черкесская Респ.", "Респ. Карелия", "Респ. Коми", "Респ. Марий Эл", "Респ. Мордовия", "Респ. Северная Осетия — Алания", "Респ. Татарстан", "Чеченская Респ.", "Чувашская Респ.", "Краснодарский край", "Ставропольский край", "Архангельская обл.", "Астраханская обл.", "Белгородская обл.", "Брянская обл.", "Владимирская обл.", "Волгоградская обл.", "Вологодская обл.", "Воронежская обл.", "Ивановская обл.", "Калужская обл.", "Кировская обл.", "Костромская обл.", "Курская обл.", "Ленинградская обл.", "Липецкая обл.", "Московская обл.", "Мурманская обл.", "Нижегородская обл.", "Новгородская обл.", "Орловская обл.", "Пензенская обл.", "Псковская обл.", "Ростовская обл.", "Рязанская обл.", "Саратовская обл.", "Смоленская обл.", "Тамбовская обл.", "Тверская обл.", "Тульская обл.", "Ульяновская обл.", "Ярославская обл.", "Ненецкий автономный округ"],
        "4": ["Самарская обл.", "Респ. Удмуртия"],
        "5": ["Респ. Башкортостан", "Пермский край", "Курганская обл.", "Оренбургская обл.", "Свердловская обл.", "Тюменская обл.", "Челябинская обл.", "Ямало-Ненецкий автономный округ"],
        "6": ["Респ. Алтай", "Алтайский край", "Новосибирская обл.", "Омская обл.", "Томская обл."],
        "7": ["Респ. Тыва", "Респ. Хакасия", "Красноярский край", "Кемеровская обл."],
        "8": ["Респ. Бурятия", "Забайкальский край", "Иркутская обл."],
        "9": ["часть Респ. Саха (Якутия)", "Амурская обл."],
        "10": ["Приморский край", "Хабаровский край", "Магаданская обл.", "Сахалинская обл. (кроме Северо-Курильского района)", "Еврейская автономная обл."],
        "11": ["Сахалинская обл. (только Северо-Курильский район)"],
        "12": ["Камчатский край", "Чукотский автономный округ"]
    ]
    static let ukrainianPlaces = ["Винницкая Обл.", "Волынская Обл.", "Днепропетровская Обл.", "Донецкая Обл.", "Житомирская Обл.", "Закарпатская Обл.", "Запорожская Обл.", "Ивано-Франковская Обл.", "Киевская Обл.", "Кировоградская Обл.", "Курорт Буковель", "Луганская Обл.", "Львовская Обл.", "Николаевская Обл.", "Одесская Обл.", "Полтавская Обл.", "Ровенская Обл.", "Сумская Обл.", "Тернопольская Обл.", "Харьковская Обл.", "Херсонская Обл.", "Хмельницкая Обл.", "Черкасская Обл.", "Черниговская Обл.", "Черновицкая Обл."]
}
